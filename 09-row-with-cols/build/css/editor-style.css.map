{"version":3,"sources":["editor-style.css","editor-style.scss","../../../../../../bsx-basic-style/node_modules/bootstrap/scss/mixins/_grid.scss","../../../../../../bsx-basic-style/node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"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","file":"editor-style.css","sourcesContent":["[data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -15px;\n  margin-left: -15px; }\n\n[data-no-gutters=\"true\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  margin-right: 0;\n  margin-left: 0; }\n  [data-no-gutters=\"true\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout > [data-size] {\n    padding-right: 0;\n    padding-left: 0; }\n\n[data-align-items=\"start\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  align-items: start; }\n\n[data-align-items=\"center\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  align-items: center; }\n\n[data-align-items=\"end\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  align-items: end; }\n\n[data-justify-content=\"start\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  justify-content: start; }\n\n[data-justify-content=\"center\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  justify-content: center; }\n\n[data-justify-content=\"end\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  justify-content: end; }\n\n[data-justify-content=\"between\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  justify-content: space-between; }\n\n[data-justify-content=\"around\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  justify-content: space-around; }\n\n[data-form-row=\"true\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout {\n  margin-right: -5px;\n  margin-left: -5px; }\n\n[data-type=\"bsx-blocks/row-with-cols\"] > .row {\n  display: block;\n  margin-left: 0;\n  margin-right: 0; }\n\n[data-size=\"1\"], [data-size=\"2\"], [data-size=\"3\"], [data-size=\"4\"], [data-size=\"5\"], [data-size=\"6\"], [data-size=\"7\"], [data-size=\"8\"], [data-size=\"9\"], [data-size=\"10\"], [data-size=\"11\"], [data-size=\"12\"], [data-size=\"null\"],\n[data-size=\"auto\"], [data-size-sm=\"1\"], [data-size-sm=\"2\"], [data-size-sm=\"3\"], [data-size-sm=\"4\"], [data-size-sm=\"5\"], [data-size-sm=\"6\"], [data-size-sm=\"7\"], [data-size-sm=\"8\"], [data-size-sm=\"9\"], [data-size-sm=\"10\"], [data-size-sm=\"11\"], [data-size-sm=\"12\"], [data-size-sm=\"null\"],\n[data-size-sm=\"auto\"], [data-size-md=\"1\"], [data-size-md=\"2\"], [data-size-md=\"3\"], [data-size-md=\"4\"], [data-size-md=\"5\"], [data-size-md=\"6\"], [data-size-md=\"7\"], [data-size-md=\"8\"], [data-size-md=\"9\"], [data-size-md=\"10\"], [data-size-md=\"11\"], [data-size-md=\"12\"], [data-size-md=\"null\"],\n[data-size-md=\"auto\"], [data-size-lg=\"1\"], [data-size-lg=\"2\"], [data-size-lg=\"3\"], [data-size-lg=\"4\"], [data-size-lg=\"5\"], [data-size-lg=\"6\"], [data-size-lg=\"7\"], [data-size-lg=\"8\"], [data-size-lg=\"9\"], [data-size-lg=\"10\"], [data-size-lg=\"11\"], [data-size-lg=\"12\"], [data-size-lg=\"null\"],\n[data-size-lg=\"auto\"], [data-size-xl=\"1\"], [data-size-xl=\"2\"], [data-size-xl=\"3\"], [data-size-xl=\"4\"], [data-size-xl=\"5\"], [data-size-xl=\"6\"], [data-size-xl=\"7\"], [data-size-xl=\"8\"], [data-size-xl=\"9\"], [data-size-xl=\"10\"], [data-size-xl=\"11\"], [data-size-xl=\"12\"], [data-size-xl=\"null\"],\n[data-size-xl=\"auto\"] {\n  position: relative;\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px; }\n\n[data-size=\"null\"] {\n  flex-basis: 0;\n  flex-grow: 1;\n  min-width: 0;\n  max-width: 100%; }\n\n[data-size=\"auto\"] {\n  flex: 0 0 auto;\n  width: auto;\n  max-width: 100%; }\n\n[data-size=\"1\"] {\n  flex: 0 0 8.33333%;\n  max-width: 8.33333%; }\n\n[data-size=\"2\"] {\n  flex: 0 0 16.66667%;\n  max-width: 16.66667%; }\n\n[data-size=\"3\"] {\n  flex: 0 0 25%;\n  max-width: 25%; }\n\n[data-size=\"4\"] {\n  flex: 0 0 33.33333%;\n  max-width: 33.33333%; }\n\n[data-size=\"5\"] {\n  flex: 0 0 41.66667%;\n  max-width: 41.66667%; }\n\n[data-size=\"6\"] {\n  flex: 0 0 50%;\n  max-width: 50%; }\n\n[data-size=\"7\"] {\n  flex: 0 0 58.33333%;\n  max-width: 58.33333%; }\n\n[data-size=\"8\"] {\n  flex: 0 0 66.66667%;\n  max-width: 66.66667%; }\n\n[data-size=\"9\"] {\n  flex: 0 0 75%;\n  max-width: 75%; }\n\n[data-size=\"10\"] {\n  flex: 0 0 83.33333%;\n  max-width: 83.33333%; }\n\n[data-size=\"11\"] {\n  flex: 0 0 91.66667%;\n  max-width: 91.66667%; }\n\n[data-size=\"12\"] {\n  flex: 0 0 100%;\n  max-width: 100%; }\n\n@media (min-width: 576px) {\n  [data-size-sm=\"null\"] {\n    flex-basis: 0;\n    flex-grow: 1;\n    min-width: 0;\n    max-width: 100%; }\n  [data-size-sm=\"auto\"] {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  [data-size-sm=\"1\"] {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  [data-size-sm=\"2\"] {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  [data-size-sm=\"3\"] {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  [data-size-sm=\"4\"] {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  [data-size-sm=\"5\"] {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  [data-size-sm=\"6\"] {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  [data-size-sm=\"7\"] {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  [data-size-sm=\"8\"] {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  [data-size-sm=\"9\"] {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  [data-size-sm=\"10\"] {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  [data-size-sm=\"11\"] {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  [data-size-sm=\"12\"] {\n    flex: 0 0 100%;\n    max-width: 100%; } }\n\n@media (min-width: 768px) {\n  [data-size-md=\"null\"] {\n    flex-basis: 0;\n    flex-grow: 1;\n    min-width: 0;\n    max-width: 100%; }\n  [data-size-md=\"auto\"] {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  [data-size-md=\"1\"] {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  [data-size-md=\"2\"] {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  [data-size-md=\"3\"] {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  [data-size-md=\"4\"] {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  [data-size-md=\"5\"] {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  [data-size-md=\"6\"] {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  [data-size-md=\"7\"] {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  [data-size-md=\"8\"] {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  [data-size-md=\"9\"] {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  [data-size-md=\"10\"] {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  [data-size-md=\"11\"] {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  [data-size-md=\"12\"] {\n    flex: 0 0 100%;\n    max-width: 100%; } }\n\n@media (min-width: 992px) {\n  [data-size-lg=\"null\"] {\n    flex-basis: 0;\n    flex-grow: 1;\n    min-width: 0;\n    max-width: 100%; }\n  [data-size-lg=\"auto\"] {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  [data-size-lg=\"1\"] {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  [data-size-lg=\"2\"] {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  [data-size-lg=\"3\"] {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  [data-size-lg=\"4\"] {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  [data-size-lg=\"5\"] {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  [data-size-lg=\"6\"] {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  [data-size-lg=\"7\"] {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  [data-size-lg=\"8\"] {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  [data-size-lg=\"9\"] {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  [data-size-lg=\"10\"] {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  [data-size-lg=\"11\"] {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  [data-size-lg=\"12\"] {\n    flex: 0 0 100%;\n    max-width: 100%; } }\n\n@media (min-width: 1200px) {\n  [data-size-xl=\"null\"] {\n    flex-basis: 0;\n    flex-grow: 1;\n    min-width: 0;\n    max-width: 100%; }\n  [data-size-xl=\"auto\"] {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  [data-size-xl=\"1\"] {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  [data-size-xl=\"2\"] {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  [data-size-xl=\"3\"] {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  [data-size-xl=\"4\"] {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  [data-size-xl=\"5\"] {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  [data-size-xl=\"6\"] {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  [data-size-xl=\"7\"] {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  [data-size-xl=\"8\"] {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  [data-size-xl=\"9\"] {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  [data-size-xl=\"10\"] {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  [data-size-xl=\"11\"] {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  [data-size-xl=\"12\"] {\n    flex: 0 0 100%;\n    max-width: 100%; } }\n\n[data-form-row=\"true\"][data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout > .block-editor-block-list__block {\n  padding-right: 5px;\n  padding-left: 5px; }\n\n[data-type=\"bsx-blocks/row-with-cols\"] > .row > .block-editor-inner-blocks > .block-editor-block-list__layout > .block-editor-block-list__block[data-size] {\n  margin-left: unset;\n  margin-right: unset; }\n\n[data-size] > [class*=\"col\"] {\n  width: 100%;\n  padding-right: 0;\n  padding-left: 0;\n  max-width: unset; }\n\n[data-size] ~ .block-list-appender {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px; }\n","// editor style\n\n\n// selectors\n\n$bsxui-row-with-cols-block-selector: \t\t'[data-type=\"bsx-blocks/row-with-cols\"]' !default;\n$bsxui-editor-row-selector: \t\t\t\t#{$bsxui-row-with-cols-block-selector}#{' > .row > .block-editor-inner-blocks > .block-editor-block-list__layout'} !default;\n// selector chain from columns block down to col block (not .col{...} itself)\n$bsxui-editor-col-selector:\t\t\t\t#{$bsxui-editor-row-selector}#{' > .block-editor-block-list__block'} !default;\n$bsxui-col-list-appender-selector:\t\t'.block-list-appender' !default;\n\n\n// imports\n@import \"../../build/_basic-style-vars-and-bootstrap-grid\";\n\n\n// row mixin\n\n@mixin make-editor-row($gutter: $bsx-grid-gutter-width) {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -$gutter / 2;\n  margin-left: -$gutter / 2;\n}\n\n\n// row build\n\n#{$bsxui-editor-row-selector} {\n\t@include make-editor-row();\n}\n\n// no gutters row\n\n//.no-gutters {\n[data-no-gutters=\"true\"]#{$bsxui-editor-row-selector} {\n\tmargin-right: 0;\n\tmargin-left: 0;\n\n\t//> .col,\n\t//> [class*=\"col-\"] {\n\t> [data-size] {\n\t\tpadding-right: 0;\n\t\tpadding-left: 0;\n\t}\n}\n\n// row items align\n\n[data-align-items=\"start\"]#{$bsxui-editor-row-selector} {\n\talign-items: start;\n}\n[data-align-items=\"center\"]#{$bsxui-editor-row-selector} {\n\talign-items: center;\n}\n[data-align-items=\"end\"]#{$bsxui-editor-row-selector} {\n\talign-items: end;\n}\n\n// row justify content\n\n$bsxui-justify-content-values: (\n\tstart: \"start\", \n\tcenter: \"center\", \n\tend: \"end\", \n\tbetween: \"space-between\",\n\taround: \"space-around\"\n) !default;\n\n@mixin bsxui-make-align-items-classes($map: $bsxui-justify-content-values) {\n\t@each $key, $val in $map {\n\t    [data-justify-content=\"#{$key}\"]#{$bsxui-editor-row-selector} {\n\t    \tjustify-content: #{$val};\n\t    }\n\t}\n}\n\n@include bsxui-make-align-items-classes();\n\n// form row\n\n[data-form-row=\"true\"]#{$bsxui-editor-row-selector} {\n\tmargin-right: -$form-grid-gutter-width / 2;\n\tmargin-left: -$form-grid-gutter-width / 2;\n}\n\n\n// reset editor row inner width (.row)\n\n#{$bsxui-row-with-cols-block-selector} > .row {\n\tdisplay: block;\n\tmargin-left: 0;\n\tmargin-right: 0;\n}\n\n\n// col mixin\n\n@mixin make-editor-grid-columns($columns: $grid-columns, $gutter: $bsx-grid-gutter-width, $breakpoints: $grid-breakpoints) {\n  // Common properties for all breakpoints\n  %grid-column {\n    position: relative;\n    width: 100%;\n    padding-right: $gutter / 2;\n    padding-left: $gutter / 2;\n  }\n\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @if $columns > 0 {\n      // Allow columns to stretch full width below their breakpoints\n      @for $i from 1 through $columns {\n        //.col#{$infix}-#{$i} {\n        [data-size#{$infix}=\"#{$i}\"] {\n          @extend %grid-column;\n        }\n      }\n    }\n\n    //.col#{$infix},\n    //.col#{$infix}-auto {\n    [data-size#{$infix}=\"null\"],\n    [data-size#{$infix}=\"auto\"] {\n      @extend %grid-column;\n    }\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      //.col#{$infix} {\n      [data-size#{$infix}=\"null\"] {\n        flex-basis: 0;\n        flex-grow: 1;\n        min-width: 0; // See https://github.com/twbs/bootstrap/issues/25410\n        max-width: 100%;\n      }\n\n      //.col#{$infix}-auto {\n      [data-size#{$infix}=\"auto\"] {\n        @include make-col-auto();\n      }\n\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          //.col#{$infix}-#{$i} {\n          [data-size#{$infix}=\"#{$i}\"] {\n            @include make-col($i, $columns);\n          }\n        }\n      }\n    }\n  }\n}\n\n\n// col build\n@include make-editor-grid-columns();\n\n\n// form row col\n\n[data-form-row=\"true\"]#{$bsxui-editor-col-selector} {\n\tpadding-right: $form-grid-gutter-width / 2;\n\tpadding-left: $form-grid-gutter-width / 2;\n}\n\n\n// fix editor col margin x\n#{$bsxui-editor-col-selector}[data-size] {\n    margin-left: unset;\n    margin-right: unset;\n}\n\n\n// reset editor col inner width (.col{...})\n\n[data-size] {\n    > [class*=\"col\"] {\n    \twidth: 100%;\n\t    padding-right: 0;\n\t    padding-left: 0;\n\t    max-width: unset;\n    }\n}\n\n\n// resize block list appender\n\n[data-size] ~ #{$bsxui-col-list-appender-selector} {\n    width: 100%;\n    padding-right: $bsx-grid-gutter-width / 2;\n    padding-left: $bsx-grid-gutter-width / 2;\n}\n\n","/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container($gutter: $grid-gutter-width) {\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n}\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -$gutter / 2;\n  margin-left: -$gutter / 2;\n}\n\n@mixin make-col-ready($gutter: $grid-gutter-width) {\n  position: relative;\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we use `flex` values\n  // later on to override this initial width.\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n}\n\n@mixin make-col($size, $columns: $grid-columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n  max-width: 100%; // Reset earlier grid tiers\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n\n// Row columns\n//\n// Specify on a parent element(e.g., .row) to force immediate children into NN\n// numberof columns. Supports wrapping to new lines, but does not do a Masonry\n// style grid.\n@mixin row-cols($count) {\n  & > * {\n    flex: 0 0 100% / $count;\n    max-width: 100% / $count;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}